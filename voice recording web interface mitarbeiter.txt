<!DOCTYPE html>
<html lang="de">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Meta-Baufirma Voice System</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            display: flex;
            justify-content: center;
            align-items: center;
            padding: 20px;
        }
        
        .container {
            background: white;
            border-radius: 20px;
            padding: 30px;
            box-shadow: 0 15px 35px rgba(0,0,0,0.1);
            text-align: center;
            max-width: 400px;
            width: 100%;
        }
        
        .logo {
            font-size: 24px;
            font-weight: bold;
            color: #333;
            margin-bottom: 30px;
        }
        
        .record-btn {
            width: 120px;
            height: 120px;
            border-radius: 50%;
            border: none;
            background: linear-gradient(135deg, #ff6b6b, #ee5a52);
            color: white;
            font-size: 18px;
            cursor: pointer;
            transition: all 0.3s ease;
            margin: 20px auto;
            display: flex;
            align-items: center;
            justify-content: center;
            flex-direction: column;
        }
        
        .record-btn:hover {
            transform: scale(1.05);
            box-shadow: 0 8px 25px rgba(255,107,107,0.4);
        }
        
        .record-btn.recording {
            background: linear-gradient(135deg, #51cf66, #40c057);
            animation: pulse 2s infinite;
        }
        
        @keyframes pulse {
            0% { box-shadow: 0 0 0 0 rgba(81, 207, 102, 0.7); }
            70% { box-shadow: 0 0 0 20px rgba(81, 207, 102, 0); }
            100% { box-shadow: 0 0 0 0 rgba(81, 207, 102, 0); }
        }
        
        .status {
            margin-top: 20px;
            font-size: 16px;
            color: #666;
            min-height: 50px;
            display: flex;
            align-items: center;
            justify-content: center;
        }
        
        .response {
            background: #f8f9fa;
            padding: 15px;
            border-radius: 10px;
            margin-top: 20px;
            font-size: 14px;
            color: #333;
            text-align: left;
            display: none;
        }
        
        .examples {
            margin-top: 30px;
            text-align: left;
            color: #666;
            font-size: 12px;
        }
        
        .examples h4 {
            margin-bottom: 10px;
            color: #333;
        }
        
        .examples li {
            margin-bottom: 5px;
        }
        
        .loading {
            display: none;
            margin-top: 20px;
        }
        
        .spinner {
            border: 3px solid #f3f3f3;
            border-top: 3px solid #667eea;
            border-radius: 50%;
            width: 30px;
            height: 30px;
            animation: spin 1s linear infinite;
            margin: 0 auto;
        }
        
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="logo">üèóÔ∏è Meta-Baufirma</div>
        
        <button class="record-btn" id="recordBtn">
            <span id="recordIcon">üé§</span>
            <span id="recordText">Sprechen</span>
        </button>
        
        <div class="status" id="status">
            Dr√ºcken Sie den Button und sprechen Sie
        </div>
        
        <div class="loading" id="loading">
            <div class="spinner"></div>
            <div>Verarbeitung l√§uft...</div>
        </div>
        
        <div class="response" id="response"></div>
        
        <div class="examples">
            <h4>Beispiele:</h4>
            <ul>
                <li>"Erstelle Bautagebuch f√ºr Projekt M√ºller-Haus, heute wurde das Fundament gegossen"</li>
                <li>"Wo ist Max Mustermann in KW 28 eingeplant?"</li>
                <li>"Stundenzettel f√ºr heute: 8 Stunden gearbeitet am Projekt Schmidt"</li>
                <li>"Kundenvermerk: Herr Meier hat wegen Terminverschiebung angerufen"</li>
            </ul>
        </div>
    </div>

    <script>
        class VoiceRecorder {
            constructor() {
                this.mediaRecorder = null;
                this.audioChunks = [];
                this.isRecording = false;
                
                this.recordBtn = document.getElementById('recordBtn');
                this.status = document.getElementById('status');
                this.response = document.getElementById('response');
                this.loading = document.getElementById('loading');
                this.recordIcon = document.getElementById('recordIcon');
                this.recordText = document.getElementById('recordText');
                
                this.initEventListeners();
            }
            
            initEventListeners() {
                this.recordBtn.addEventListener('click', () => {
                    if (this.isRecording) {
                        this.stopRecording();
                    } else {
                        this.startRecording();
                    }
                });
            }
            
            async startRecording() {
                try {
                    const stream = await navigator.mediaDevices.getUserMedia({ 
                        audio: {
                            echoCancellation: true,
                            noiseSuppression: true,
                            sampleRate: 44100
                        } 
                    });
                    
                    this.mediaRecorder = new MediaRecorder(stream);
                    this.audioChunks = [];
                    
                    this.mediaRecorder.ondataavailable = (event) => {
                        this.audioChunks.push(event.data);
                    };
                    
                    this.mediaRecorder.onstop = () => {
                        this.processRecording();
                    };
                    
                    this.mediaRecorder.start();
                    this.isRecording = true;
                    
                    this.updateUI('recording');
                    
                } catch (error) {
                    console.error('Fehler beim Starten der Aufnahme:', error);
                    this.status.textContent = 'Mikrofon-Zugriff verweigert';
                }
            }
            
            stopRecording() {
                if (this.mediaRecorder && this.isRecording) {
                    this.mediaRecorder.stop();
                    this.mediaRecorder.stream.getTracks().forEach(track => track.stop());
                    this.isRecording = false;
                    
                    this.updateUI('processing');
                }
            }
            
            async processRecording() {
                const audioBlob = new Blob(this.audioChunks, { type: 'audio/wav' });
                
                const formData = new FormData();
                formData.append('audio', audioBlob, 'recording.wav');
                
                try {
                    const response = await fetch('/voice/upload', {
                        method: 'POST',
                        body: formData
                    });
                    
                    if (response.ok) {
                        const result = await response.json();
                        this.displayResult(result);
                    } else {
                        throw new Error('Server-Fehler');
                    }
                    
                } catch (error) {
                    console.error('Fehler beim Senden:', error);
                    this.status.textContent = 'Fehler beim Verarbeiten der Aufnahme';
                    this.updateUI('ready');
                }
            }
            
            displayResult(result) {
                this.status.textContent = 'Verarbeitung abgeschlossen';
                
                // Response anzeigen
                this.response.innerHTML = `
                    <h4>Erkannter Text:</h4>
                    <p>"${result.transcription}"</p>
                    
                    <h4>Aktionen:</h4>
                    <p>${result.response}</p>
                    
                    ${result.actions_taken.length > 0 ? `
                    <h4>Erstellte Dateien:</h4>
                    <ul>
                        ${result.actions_taken.map(action => 
                            `<li>${action.action}: ${action.file || 'Verarbeitet'}</li>`
                        ).join('')}
                    </ul>
                    ` : ''}
                `;
                
                this.response.style.display = 'block';
                this.updateUI('ready');
                
                // Nach 10 Sekunden Response ausblenden
                setTimeout(() => {
                    this.response.style.display = 'none';
                    this.status.textContent = 'Dr√ºcken Sie den Button und sprechen Sie';
                }, 10000);
            }
            
            updateUI(state) {
                switch(state) {
                    case 'recording':
                        this.recordBtn.classList.add('recording');
                        this.recordIcon.textContent = '‚èπÔ∏è';
                        this.recordText.textContent = 'Stop';
                        this.status.textContent = 'Aufnahme l√§uft... Zum Beenden tippen';
                        break;
                        
                    case 'processing':
                        this.recordBtn.classList.remove('recording');
                        this.recordIcon.textContent = 'üé§';
                        this.recordText.textContent = 'Sprechen';
                        this.status.textContent = '';
                        this.loading.style.display = 'block';
                        break;
                        
                    case 'ready':
                        this.recordBtn.classList.remove('recording');
                        this.recordIcon.textContent = 'üé§';
                        this.recordText.textContent = 'Sprechen';
                        this.loading.style.display = 'none';
                        break;
                }
            }
        }
        
        // App initialisieren
        document.addEventListener('DOMContentLoaded', () => {
            new VoiceRecorder();
        });
        
        // PWA Support f√ºr mobile Ger√§te
        if ('serviceWorker' in navigator) {
            window.addEventListener('load', () => {
                navigator.serviceWorker.register('/sw.js')
                    .then(registration => console.log('SW registered'))
                    .catch(error => console.log('SW registration failed'));
            });
        }
    </script>
</body>
</html>